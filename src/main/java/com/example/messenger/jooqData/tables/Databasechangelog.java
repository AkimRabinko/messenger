/*
 * This file is generated by jOOQ.
 */
package com.example.messenger.jooqData.tables;


import com.example.messenger.jooqData.Public;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Databasechangelog extends TableImpl<Record> {

    private static final long serialVersionUID = 1914032103;

    public static final Databasechangelog DATABASECHANGELOG = new Databasechangelog();

    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    public final TableField<Record, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    public final TableField<Record, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    public final TableField<Record, String> FILENAME = createField("filename", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    public final TableField<Record, LocalDateTime> DATEEXECUTED = createField("dateexecuted", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    public final TableField<Record, Integer> ORDEREXECUTED = createField("orderexecuted", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<Record, String> EXECTYPE = createField("exectype", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    public final TableField<Record, String> MD5SUM = createField("md5sum", org.jooq.impl.SQLDataType.VARCHAR(35), this, "");

    public final TableField<Record, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    public final TableField<Record, String> COMMENTS = createField("comments", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    public final TableField<Record, String> TAG = createField("tag", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    public final TableField<Record, String> LIQUIBASE = createField("liquibase", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    public final TableField<Record, String> CONTEXTS = createField("contexts", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    public final TableField<Record, String> LABELS = createField("labels", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    public final TableField<Record, String> DEPLOYMENT_ID = createField("deployment_id", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    public Databasechangelog() {
        this(DSL.name("databasechangelog"), null);
    }

    public Databasechangelog(String alias) {
        this(DSL.name(alias), DATABASECHANGELOG);
    }

    public Databasechangelog(Name alias) {
        this(alias, DATABASECHANGELOG);
    }

    private Databasechangelog(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Databasechangelog(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Databasechangelog as(String alias) {
        return new Databasechangelog(DSL.name(alias), this);
    }

    @Override
    public Databasechangelog as(Name alias) {
        return new Databasechangelog(alias, this);
    }

    @Override
    public Databasechangelog rename(String name) {
        return new Databasechangelog(DSL.name(name), null);
    }

    @Override
    public Databasechangelog rename(Name name) {
        return new Databasechangelog(name, null);
    }
}
